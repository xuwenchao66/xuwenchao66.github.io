(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{520:function(_,v,t){"use strict";t.r(v);var a=t(31),l=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"架构整洁之道"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#架构整洁之道"}},[_._v("#")]),_._v(" 架构整洁之道")]),_._v(" "),t("p",[t("a",{attrs:{href:"https://book.douban.com/subject/30333919/",target:"_blank",rel:"noopener noreferrer"}},[_._v("https://book.douban.com/subject/30333919/"),t("OutboundLink")],1)]),_._v(" "),t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[_._v("#")]),_._v(" 前言")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("所谓架构就是“用最小的人力成本来满足构建和维护系统需求”的设计行为。")])]),_._v(" "),t("li",[t("p",[_._v("大家对面向对象编程的一般理解是，由封装、继承、多态三种特性支持的，包含类、接口等若干概念的编程方式。但是从更深的层次上看，它也是一种设计范式。")])]),_._v(" "),t("li",[t("p",[_._v("多态大概算其中最神奇的特性了，程序员在确定接口时做好抽象，代码就可以很灵活，遇到新情况时，新写一个实现就可以无缝对接。")])]),_._v(" "),t("li",[t("p",[_._v("与语言无关，软件架构的规则是相同的。")])])]),_._v(" "),t("h2",{attrs:{id:"第-1-部分-概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第-1-部分-概述"}},[_._v("#")]),_._v(" 第 1 部分 概述")]),_._v(" "),t("h3",{attrs:{id:"第-1-章-设计与架构究竟是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第-1-章-设计与架构究竟是什么"}},[_._v("#")]),_._v(" 第 1 章 设计与架构究竟是什么")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("软件架构的终极目标是，用最小的人力成本来满足构建和维护该系统的需求。")])]),_._v(" "),t("li",[t("p",[_._v("研发团队最好的选择是清晰地认识并避开工程师们过度自信的特点，开始认真地对待自己的代码架构，对其质量负责。")])]),_._v(" "),t("li",[t("p",[_._v("为了在系统构建过程中采用好的设计和架构以便减少构建成本，提高生产力，又需要先了解系统架构的各种属性与成本和生产力的关系。")])])]),_._v(" "),t("h3",{attrs:{id:"第-2-章-两个价值维度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第-2-章-两个价值维度"}},[_._v("#")]),_._v(" 第 2 章 两个价值维度")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("行为价值。软件系统的行为是其最直观的价值维度。程序员的工作就是让机器按照某种指定方式运转，给系统的使用者创造或者提高利润。")])]),_._v(" "),t("li",[t("p",[_._v("架构价值。软件系统的第二个价值维度，就体现在软件这个英文单词上：software。“ware”的意思是“产品”，而“soft”的意思，不言而喻，是指软件的灵活性。")])]),_._v(" "),t("li",[t("p",[_._v("研发团队必须从公司长远利益出发与其他部门抗争，这和管理团队的工作一样，甚至市场团队、销售团队、运营团队都是这样。")])]),_._v(" "),t("li",[t("p",[_._v("如果忽视软件架构的价值，系统将会变得越来越难以维护，终会有一天，系统将会变得再也无法修改。如果系统变成了这个样子，那么说明软件开发团队没有和需求方做足够的抗争，没有完成自己应尽的职责。")])])]),_._v(" "),t("h2",{attrs:{id:"第-2-部分-从基础构件开始-编程范式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第-2-部分-从基础构件开始-编程范式"}},[_._v("#")]),_._v(" 第 2 部分 从基础构件开始：编程范式")]),_._v(" "),t("h3",{attrs:{id:"第-3-章-编程范式总览"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第-3-章-编程范式总览"}},[_._v("#")]),_._v(" 第 3 章 编程范式总览")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("三个编程范式。")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("结构化编程（structured programming）")])]),_._v(" "),t("li",[t("p",[_._v("面向对象编程（object-oriented programming）")])]),_._v(" "),t("li",[t("p",[_._v("函数式编程（functional programming）")])])])]),_._v(" "),t("li",[t("p",[_._v("结构化编程。")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("是第一个普遍被采用的编程范式。")])]),_._v(" "),t("li",[t("p",[_._v("Edsger Wybe Dijkstra 于 1968 年最先提出。 与此同时， Dijkstra 还论证了使用 goto 这样的无限制跳转语句将会损害程序的整体结构。接下来的章节我们还会说到，也是这位 Dijkstra 最先主张用我们现在熟知的 if/then/else 语句和 do/while/until 语句来代替跳转语句的。")])]),_._v(" "),t("li",[t("p",[_._v("结构化编程对程序控制权的直接转移进行了限制和规范。")])])])]),_._v(" "),t("li",[t("p",[_._v("面向对象编程。")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("在 ALGOL 语言中， 函数调用堆栈（call stack frame）可以被挪到堆内存区域里，这样函数定义的本地变量就可以在函数返回之后继续存在。这个函数就成为了一个类（class）的 构造函数，而它所定义的本地变量就是类的成员变量，构造函数定义的嵌套函数就成为了成员方法（method）。")])]),_._v(" "),t("li",[t("p",[_._v("这样一来， 我们就可以利 用多态（polymorphism）来限制用户对函数指针的使用。")])]),_._v(" "),t("li",[t("p",[_._v("面向对象编程对程序控制权的间接转移进行了限制和规范。")])])])]),_._v(" "),t("li",[t("p",[_._v("函数式编程。")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("从理论上来说，函数式编程语言中应该是没有赋值语句的。大部分函数式编程语言只允许在非常严格的限制条件下，才可以更改某个变量的值。")])]),_._v(" "),t("li",[t("p",[_._v("函数式编程对程序中的赋值进行了限制和规范。")])])])]),_._v(" "),t("li",[t("p",[_._v("上述的范式，和软件架构的三大关注重点不谋而合：功能性、组件独立性以及数据管理。")])])]),_._v(" "),t("h3",{attrs:{id:"第-4-章-结构化编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第-4-章-结构化编程"}},[_._v("#")]),_._v(" 第 4 章 结构化编程")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("结构化编程范式可将模块递归降解拆分为可推导的单元，这就意味着模块也可以按功能进行降解拆分。")])]),_._v(" "),t("li",[t("p",[_._v("可以将一个大型问题拆分为一系列高级函数的组合，而这些高级函数各自又可以继续被拆分为一系列低级函数，如此无限递归。")])]),_._v(" "),t("li",[t("p",[_._v("结构化编程范式中最有价值的地方就是， 它赋予了我们创造可证伪程序单元的能力。")])])]),_._v(" "),t("h3",{attrs:{id:"第-5-章-面向对象编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第-5-章-面向对象编程"}},[_._v("#")]),_._v(" 第 5 章 面向对象编程")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("封装")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("面向对象编程语言为我们方便而有效地封装数据和函数提供了有力的支持，导致封装这个概念经常被引用为面向对象编程定义的一部分（内聚）。")])]),_._v(" "),t("li",[t("p",[_._v("通过采用封装特性，我们可以把一组相关联的数据和函数圈起来，使圈外面的代码只能看见部分函数，数据则完全不可见（隔离）。")])])])]),_._v(" "),t("li",[t("p",[_._v("继承")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("继承的主要作用是让我们可以在某个作用域内对外部定义的某一组变量与函数进行覆盖。")])]),_._v(" "),t("li",[t("p",[_._v("虽然面向对象编程在继承性方面并没有开创出新，但是的确在数据结构的伪装性上提供了相当程度的便利性。")])])])]),_._v(" "),t("li",[t("p",[_._v("多态")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("采用面向对象编程语言让多态实现变得 非常简单。")])]),_._v(" "),t("li",[t("p",[_._v("面向对象编程其实是对程序间接控制权的转移进行了约束。")])]),_._v(" "),t("li",[t("p",[_._v("软件架构师可以完全控制采用了面向对象这种编程方式的系统中所有的源代码依赖关系，而不再受到系统控制流的限制。不管哪个模块调用或者被调用，软件架构师都可以随意更改源代码依赖关系。")])]),_._v(" "),t("li",[t("p",[_._v("当某个组件的源代码需要修改时，仅仅需要重新部署该组件，不需要更改其他组件，这就是独立部署能力。")])]),_._v(" "),t("li",[t("p",[_._v("如果系统中的所有组件都可以独立部署，那它们就可以由不同的团队并行开发，这就是所谓的独立开发能力。")])])])]),_._v(" "),t("li",[t("p",[_._v("面向对象编程就是以多态为手段来对源代码中的依赖关系进行控制的能力，这种能力让软件架构师可以构建出某种插件式架构，让高层策略性组件与底层实现性组件相分离，底层组件可以被编译成插件，实现独立于高层组件的开发和部署。")])])]),_._v(" "),t("h3",{attrs:{id:"第-6-章-函数式编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第-6-章-函数式编程"}},[_._v("#")]),_._v(" 第 6 章 函数式编程")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("一切并发应用遇到的问题， 一切由于使用多线程、多处理器而引起的问题，如果没有可变变量的话都不可能发生。")])]),_._v(" "),t("li",[t("p",[_._v("一个架构设计良好的应用程序应该将状态修改的部分和不需要修改状态的部分隔离成单独的组件，然后用合适的机制来保护可变量。")])]),_._v(" "),t("li",[t("p",[_._v("软件架构师应该着力于将大部分处理逻辑都归于不可变组件中，可变状态组件的逻辑应该越少越好。")])]),_._v(" "),t("li",[t("p",[_._v("函数式编程是对程序中赋值操作的限制。")])])]),_._v(" "),t("h2",{attrs:{id:"第-3-部分-设计原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第-3-部分-设计原则"}},[_._v("#")]),_._v(" 第 3 部分 设计原则")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("SOLID 原则的主要作用就是告诉我们如何将数据和函数组织成为类，以及如何将这些类链接起来成为程序。")])]),_._v(" "),t("li",[t("p",[_._v("一般情况下，我们为软件构建中层结构的主要目标如下：")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("使软件可容忍被改动。")])]),_._v(" "),t("li",[t("p",[_._v("使软件更容易被理解。")])]),_._v(" "),t("li",[t("p",[_._v("构建可在多个软件系统中复用的组件。")])])])])]),_._v(" "),t("h3",{attrs:{id:"第-7-章-srp-单一职责原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第-7-章-srp-单一职责原则"}},[_._v("#")]),_._v(" 第 7 章 SRP：单一职责原则")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("以面向底层实现细节的设计原则来说，可以理解为每个模块都应该只做一件事。")])]),_._v(" "),t("li",[t("p",[_._v("更广义的理解，任何一个软件模块都应该只对某一类行为者负责，有且只有一个（类）被修改的原则。")])])]),_._v(" "),t("h3",{attrs:{id:"第-8-章-ocp-开闭原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第-8-章-ocp-开闭原则"}},[_._v("#")]),_._v(" 第 8 章 OCP：开闭原则")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("如果软件系统想要更容易被改变，那么其设计就必须允许新增代码来修改系统行为，而非只能靠修改原来的代码。")])]),_._v(" "),t("li",[t("p",[_._v("一个设计良好的计算机系统应该在不需要修改的前提下就可以轻易被扩展。")])]),_._v(" "),t("li",[t("p",[_._v("OCP 是我们进行系统架构设计的主导原则，其主要目标是让系统易于扩展，同时限制其每次被修改所影响的范围。")])]),_._v(" "),t("li",[t("p",[_._v("实现方式是通过将系统划分为一系列组件，并且将这些组件间的依赖关系按层次结构进行组织，使得高阶组件不会因低阶组件被修改而受到影响。")])])]),_._v(" "),t("h3",{attrs:{id:"第-9-章-lsp-里氏替换原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第-9-章-lsp-里氏替换原则"}},[_._v("#")]),_._v(" 第 9 章 LSP：里氏替换原则")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("强调了可替换性，如果想用可替换的组件来构建软件系统，那么这些组件就必须遵守同一个约定，以便让这些组件可以相互替换。")])]),_._v(" "),t("li",[t("p",[_._v("LSP 可以且应该被应用于软件架构层面， 因为一旦违背了可替换性，该系统架构就不得不为此增添大量复杂的应对机制。")])])])])}),[],!1,null,null,null);v.default=l.exports}}]);